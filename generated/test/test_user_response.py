# coding: utf-8

"""
    Passage Management API

    Passage's management API to manage your Passage apps and users.

    The version of the OpenAPI document: 1
    Contact: support@passage.id
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.user_response import UserResponse

class TestUserResponse(unittest.TestCase):
    """UserResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> UserResponse:
        """Test UserResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `UserResponse`
        """
        model = UserResponse()
        if include_optional:
            return UserResponse(
                user = openapi_client.models.user_info.UserInfo(
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    email = '', 
                    email_verified = True, 
                    id = '', 
                    last_login_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    login_count = 56, 
                    phone = '', 
                    phone_verified = True, 
                    recent_events = [
                        openapi_client.models.user_event_info.UserEventInfo(
                            created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            id = '', 
                            ip_addr = '', 
                            type = '', 
                            user_agent = '', )
                        ], 
                    social_connections = openapi_client.models.user_social_connections.UserSocialConnections(
                        google = openapi_client.models.google_social_connection.GoogleSocialConnection(
                            provider_id = '', 
                            created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                        github = openapi_client.models.github_social_connection.GithubSocialConnection(
                            provider_id = '', 
                            created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), ), 
                    status = 'active', 
                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    user_metadata = openapi_client.models.user_metadata.user_metadata(), 
                    webauthn = True, 
                    webauthn_devices = [
                        openapi_client.models.web_authn_devices.WebAuthnDevices(
                            created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            cred_id = '', 
                            friendly_name = '', 
                            id = '', 
                            last_login_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            type = 'passkey', 
                            updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            usage_count = 56, 
                            icons = openapi_client.models.web_authn_icons.WebAuthnIcons(
                                light = '', 
                                dark = '', ), )
                        ], 
                    webauthn_types = [
                        'passkey'
                        ], )
            )
        else:
            return UserResponse(
                user = openapi_client.models.user_info.UserInfo(
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    email = '', 
                    email_verified = True, 
                    id = '', 
                    last_login_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    login_count = 56, 
                    phone = '', 
                    phone_verified = True, 
                    recent_events = [
                        openapi_client.models.user_event_info.UserEventInfo(
                            created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            id = '', 
                            ip_addr = '', 
                            type = '', 
                            user_agent = '', )
                        ], 
                    social_connections = openapi_client.models.user_social_connections.UserSocialConnections(
                        google = openapi_client.models.google_social_connection.GoogleSocialConnection(
                            provider_id = '', 
                            created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                        github = openapi_client.models.github_social_connection.GithubSocialConnection(
                            provider_id = '', 
                            created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), ), 
                    status = 'active', 
                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    user_metadata = openapi_client.models.user_metadata.user_metadata(), 
                    webauthn = True, 
                    webauthn_devices = [
                        openapi_client.models.web_authn_devices.WebAuthnDevices(
                            created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            cred_id = '', 
                            friendly_name = '', 
                            id = '', 
                            last_login_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            type = 'passkey', 
                            updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            usage_count = 56, 
                            icons = openapi_client.models.web_authn_icons.WebAuthnIcons(
                                light = '', 
                                dark = '', ), )
                        ], 
                    webauthn_types = [
                        'passkey'
                        ], ),
        )
        """

    def testUserResponse(self):
        """Test UserResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
