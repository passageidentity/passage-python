# coding: utf-8

"""
    Passage Management API

    Passage's management API to manage your Passage apps and users.

    The version of the OpenAPI document: 1
    Contact: support@passage.id
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.element_customization import ElementCustomization

class TestElementCustomization(unittest.TestCase):
    """ElementCustomization unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ElementCustomization:
        """Test ElementCustomization
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ElementCustomization`
        """
        model = ElementCustomization()
        if include_optional:
            return ElementCustomization(
                passage_container_background_color = '#ffffff',
                passage_container_max_width = 56,
                passage_input_box_background_color = '#ffffff',
                passage_input_box_border_radius = 56,
                passage_header_font_family = 'Helvetica',
                passage_body_font_family = 'Helvetica',
                passage_header_text_color = '#222222',
                passage_body_text_color = '#222222',
                passage_primary_button_background_color = '#121212',
                passage_primary_button_text_color = '#f3f3f3',
                passage_primary_button_hover_color = '#4d4d4d',
                passage_primary_button_border_radius = 56,
                passage_primary_button_border_color = '#121212',
                passage_primary_button_border_width = 56,
                passage_secondary_button_background_color = '#ffffff',
                passage_secondary_button_text_color = '#222222',
                passage_secondary_button_hover_color = '#d7d7d7',
                passage_secondary_button_border_radius = 56,
                passage_secondary_button_border_color = '#d7d7d7',
                passage_secondary_button_border_width = 56
            )
        else:
            return ElementCustomization(
        )
        """

    def testElementCustomization(self):
        """Test ElementCustomization"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
